$date
	Thu Oct  8 18:01:56 2020
$end
$version
	QuestaSim Version 10.2b
$end
$timescale
	1ns
$end
$scope module integration_top $end
$var reg 1 ! ip_CLK $end
$var reg 1 " ip_RSTn $end
$scope module mips_mpa_dut_inst $end
$var parameter 32 # DATA_WIDTH $end
$var parameter 32 $ INSTR_WIDTH $end
$var parameter 32 % ADDRESS_WIDTH $end
$var parameter 32 & RESET_PC_ADDRESS $end
$var wire 1 ' HW_RSTn $end
$var wire 1 ( CLK $end
$var wire 1 ) din [31] $end
$var wire 1 * din [30] $end
$var wire 1 + din [29] $end
$var wire 1 , din [28] $end
$var wire 1 - din [27] $end
$var wire 1 . din [26] $end
$var wire 1 / din [25] $end
$var wire 1 0 din [24] $end
$var wire 1 1 din [23] $end
$var wire 1 2 din [22] $end
$var wire 1 3 din [21] $end
$var wire 1 4 din [20] $end
$var wire 1 5 din [19] $end
$var wire 1 6 din [18] $end
$var wire 1 7 din [17] $end
$var wire 1 8 din [16] $end
$var wire 1 9 din [15] $end
$var wire 1 : din [14] $end
$var wire 1 ; din [13] $end
$var wire 1 < din [12] $end
$var wire 1 = din [11] $end
$var wire 1 > din [10] $end
$var wire 1 ? din [9] $end
$var wire 1 @ din [8] $end
$var wire 1 A din [7] $end
$var wire 1 B din [6] $end
$var wire 1 C din [5] $end
$var wire 1 D din [4] $end
$var wire 1 E din [3] $end
$var wire 1 F din [2] $end
$var wire 1 G din [1] $end
$var wire 1 H din [0] $end
$var wire 1 I dout [31] $end
$var wire 1 J dout [30] $end
$var wire 1 K dout [29] $end
$var wire 1 L dout [28] $end
$var wire 1 M dout [27] $end
$var wire 1 N dout [26] $end
$var wire 1 O dout [25] $end
$var wire 1 P dout [24] $end
$var wire 1 Q dout [23] $end
$var wire 1 R dout [22] $end
$var wire 1 S dout [21] $end
$var wire 1 T dout [20] $end
$var wire 1 U dout [19] $end
$var wire 1 V dout [18] $end
$var wire 1 W dout [17] $end
$var wire 1 X dout [16] $end
$var wire 1 Y dout [15] $end
$var wire 1 Z dout [14] $end
$var wire 1 [ dout [13] $end
$var wire 1 \ dout [12] $end
$var wire 1 ] dout [11] $end
$var wire 1 ^ dout [10] $end
$var wire 1 _ dout [9] $end
$var wire 1 ` dout [8] $end
$var wire 1 a dout [7] $end
$var wire 1 b dout [6] $end
$var wire 1 c dout [5] $end
$var wire 1 d dout [4] $end
$var wire 1 e dout [3] $end
$var wire 1 f dout [2] $end
$var wire 1 g dout [1] $end
$var wire 1 h dout [0] $end
$var wire 1 i addr [31] $end
$var wire 1 j addr [30] $end
$var wire 1 k addr [29] $end
$var wire 1 l addr [28] $end
$var wire 1 m addr [27] $end
$var wire 1 n addr [26] $end
$var wire 1 o addr [25] $end
$var wire 1 p addr [24] $end
$var wire 1 q addr [23] $end
$var wire 1 r addr [22] $end
$var wire 1 s addr [21] $end
$var wire 1 t addr [20] $end
$var wire 1 u addr [19] $end
$var wire 1 v addr [18] $end
$var wire 1 w addr [17] $end
$var wire 1 x addr [16] $end
$var wire 1 y addr [15] $end
$var wire 1 z addr [14] $end
$var wire 1 { addr [13] $end
$var wire 1 | addr [12] $end
$var wire 1 } addr [11] $end
$var wire 1 ~ addr [10] $end
$var wire 1 !! addr [9] $end
$var wire 1 "! addr [8] $end
$var wire 1 #! addr [7] $end
$var wire 1 $! addr [6] $end
$var wire 1 %! addr [5] $end
$var wire 1 &! addr [4] $end
$var wire 1 '! addr [3] $end
$var wire 1 (! addr [2] $end
$var wire 1 )! addr [1] $end
$var wire 1 *! addr [0] $end
$var wire 1 +! debug_func [1] $end
$var wire 1 ,! debug_func [0] $end
$var wire 1 -! debug_we $end
$var wire 1 .! debug_re $end
$var wire 1 /! mem_debug $end
$var wire 1 0! mem_debug_clk_gate $end
$var wire 1 1! instr_mem_we_gate $end
$var wire 1 2! data_mem_we_gate $end
$var wire 1 3! data_mem_re_gate $end
$var wire 1 4! mips_reg_we_gate $end
$var wire 1 5! instr2mr_a0_addr_gate [4] $end
$var wire 1 6! instr2mr_a0_addr_gate [3] $end
$var wire 1 7! instr2mr_a0_addr_gate [2] $end
$var wire 1 8! instr2mr_a0_addr_gate [1] $end
$var wire 1 9! instr2mr_a0_addr_gate [0] $end
$var wire 1 :! instr2mr_a1_addr_gate [4] $end
$var wire 1 ;! instr2mr_a1_addr_gate [3] $end
$var wire 1 <! instr2mr_a1_addr_gate [2] $end
$var wire 1 =! instr2mr_a1_addr_gate [1] $end
$var wire 1 >! instr2mr_a1_addr_gate [0] $end
$var wire 1 ?! instr_imm2mr_gate [31] $end
$var wire 1 @! instr_imm2mr_gate [30] $end
$var wire 1 A! instr_imm2mr_gate [29] $end
$var wire 1 B! instr_imm2mr_gate [28] $end
$var wire 1 C! instr_imm2mr_gate [27] $end
$var wire 1 D! instr_imm2mr_gate [26] $end
$var wire 1 E! instr_imm2mr_gate [25] $end
$var wire 1 F! instr_imm2mr_gate [24] $end
$var wire 1 G! instr_imm2mr_gate [23] $end
$var wire 1 H! instr_imm2mr_gate [22] $end
$var wire 1 I! instr_imm2mr_gate [21] $end
$var wire 1 J! instr_imm2mr_gate [20] $end
$var wire 1 K! instr_imm2mr_gate [19] $end
$var wire 1 L! instr_imm2mr_gate [18] $end
$var wire 1 M! instr_imm2mr_gate [17] $end
$var wire 1 N! instr_imm2mr_gate [16] $end
$var wire 1 O! instr_imm2mr_gate [15] $end
$var wire 1 P! instr_imm2mr_gate [14] $end
$var wire 1 Q! instr_imm2mr_gate [13] $end
$var wire 1 R! instr_imm2mr_gate [12] $end
$var wire 1 S! instr_imm2mr_gate [11] $end
$var wire 1 T! instr_imm2mr_gate [10] $end
$var wire 1 U! instr_imm2mr_gate [9] $end
$var wire 1 V! instr_imm2mr_gate [8] $end
$var wire 1 W! instr_imm2mr_gate [7] $end
$var wire 1 X! instr_imm2mr_gate [6] $end
$var wire 1 Y! instr_imm2mr_gate [5] $end
$var wire 1 Z! instr_imm2mr_gate [4] $end
$var wire 1 [! instr_imm2mr_gate [3] $end
$var wire 1 \! instr_imm2mr_gate [2] $end
$var wire 1 ]! instr_imm2mr_gate [1] $end
$var wire 1 ^! instr_imm2mr_gate [0] $end
$var wire 1 _! mpa_alu_func_sel_gate [2] $end
$var wire 1 `! mpa_alu_func_sel_gate [1] $end
$var wire 1 a! mpa_alu_func_sel_gate [0] $end
$var wire 1 b! mr_a0_out [31] $end
$var wire 1 c! mr_a0_out [30] $end
$var wire 1 d! mr_a0_out [29] $end
$var wire 1 e! mr_a0_out [28] $end
$var wire 1 f! mr_a0_out [27] $end
$var wire 1 g! mr_a0_out [26] $end
$var wire 1 h! mr_a0_out [25] $end
$var wire 1 i! mr_a0_out [24] $end
$var wire 1 j! mr_a0_out [23] $end
$var wire 1 k! mr_a0_out [22] $end
$var wire 1 l! mr_a0_out [21] $end
$var wire 1 m! mr_a0_out [20] $end
$var wire 1 n! mr_a0_out [19] $end
$var wire 1 o! mr_a0_out [18] $end
$var wire 1 p! mr_a0_out [17] $end
$var wire 1 q! mr_a0_out [16] $end
$var wire 1 r! mr_a0_out [15] $end
$var wire 1 s! mr_a0_out [14] $end
$var wire 1 t! mr_a0_out [13] $end
$var wire 1 u! mr_a0_out [12] $end
$var wire 1 v! mr_a0_out [11] $end
$var wire 1 w! mr_a0_out [10] $end
$var wire 1 x! mr_a0_out [9] $end
$var wire 1 y! mr_a0_out [8] $end
$var wire 1 z! mr_a0_out [7] $end
$var wire 1 {! mr_a0_out [6] $end
$var wire 1 |! mr_a0_out [5] $end
$var wire 1 }! mr_a0_out [4] $end
$var wire 1 ~! mr_a0_out [3] $end
$var wire 1 !" mr_a0_out [2] $end
$var wire 1 "" mr_a0_out [1] $end
$var wire 1 #" mr_a0_out [0] $end
$var wire 1 $" mr_a1_out_gate [31] $end
$var wire 1 %" mr_a1_out_gate [30] $end
$var wire 1 &" mr_a1_out_gate [29] $end
$var wire 1 '" mr_a1_out_gate [28] $end
$var wire 1 (" mr_a1_out_gate [27] $end
$var wire 1 )" mr_a1_out_gate [26] $end
$var wire 1 *" mr_a1_out_gate [25] $end
$var wire 1 +" mr_a1_out_gate [24] $end
$var wire 1 ," mr_a1_out_gate [23] $end
$var wire 1 -" mr_a1_out_gate [22] $end
$var wire 1 ." mr_a1_out_gate [21] $end
$var wire 1 /" mr_a1_out_gate [20] $end
$var wire 1 0" mr_a1_out_gate [19] $end
$var wire 1 1" mr_a1_out_gate [18] $end
$var wire 1 2" mr_a1_out_gate [17] $end
$var wire 1 3" mr_a1_out_gate [16] $end
$var wire 1 4" mr_a1_out_gate [15] $end
$var wire 1 5" mr_a1_out_gate [14] $end
$var wire 1 6" mr_a1_out_gate [13] $end
$var wire 1 7" mr_a1_out_gate [12] $end
$var wire 1 8" mr_a1_out_gate [11] $end
$var wire 1 9" mr_a1_out_gate [10] $end
$var wire 1 :" mr_a1_out_gate [9] $end
$var wire 1 ;" mr_a1_out_gate [8] $end
$var wire 1 <" mr_a1_out_gate [7] $end
$var wire 1 =" mr_a1_out_gate [6] $end
$var wire 1 >" mr_a1_out_gate [5] $end
$var wire 1 ?" mr_a1_out_gate [4] $end
$var wire 1 @" mr_a1_out_gate [3] $end
$var wire 1 A" mr_a1_out_gate [2] $end
$var wire 1 B" mr_a1_out_gate [1] $end
$var wire 1 C" mr_a1_out_gate [0] $end
$var wire 1 D" alu_a1_in_gate [31] $end
$var wire 1 E" alu_a1_in_gate [30] $end
$var wire 1 F" alu_a1_in_gate [29] $end
$var wire 1 G" alu_a1_in_gate [28] $end
$var wire 1 H" alu_a1_in_gate [27] $end
$var wire 1 I" alu_a1_in_gate [26] $end
$var wire 1 J" alu_a1_in_gate [25] $end
$var wire 1 K" alu_a1_in_gate [24] $end
$var wire 1 L" alu_a1_in_gate [23] $end
$var wire 1 M" alu_a1_in_gate [22] $end
$var wire 1 N" alu_a1_in_gate [21] $end
$var wire 1 O" alu_a1_in_gate [20] $end
$var wire 1 P" alu_a1_in_gate [19] $end
$var wire 1 Q" alu_a1_in_gate [18] $end
$var wire 1 R" alu_a1_in_gate [17] $end
$var wire 1 S" alu_a1_in_gate [16] $end
$var wire 1 T" alu_a1_in_gate [15] $end
$var wire 1 U" alu_a1_in_gate [14] $end
$var wire 1 V" alu_a1_in_gate [13] $end
$var wire 1 W" alu_a1_in_gate [12] $end
$var wire 1 X" alu_a1_in_gate [11] $end
$var wire 1 Y" alu_a1_in_gate [10] $end
$var wire 1 Z" alu_a1_in_gate [9] $end
$var wire 1 [" alu_a1_in_gate [8] $end
$var wire 1 \" alu_a1_in_gate [7] $end
$var wire 1 ]" alu_a1_in_gate [6] $end
$var wire 1 ^" alu_a1_in_gate [5] $end
$var wire 1 _" alu_a1_in_gate [4] $end
$var wire 1 `" alu_a1_in_gate [3] $end
$var wire 1 a" alu_a1_in_gate [2] $end
$var wire 1 b" alu_a1_in_gate [1] $end
$var wire 1 c" alu_a1_in_gate [0] $end
$var reg 1 d" mips_reg_we_local $end
$var reg 3 e" instr_imm_value_en_local [2:0] $end
$var reg 3 f" mpa_alu_func_sel_reg [2:0] $end
$var reg 32 g" alu_a1_in_reg [31:0] $end
$var reg 2 h" mr_a1_out_instr_imm_en_local [1:0] $end
$var reg 1 i" load_from_data_addr_local $end
$var reg 1 j" data_mem_we_local $end
$var reg 1 k" data_mem_re_local $end
$var reg 32 l" instr_imm2mr_reg [31:0] $end
$var wire 1 m" alu_data_out [31] $end
$var wire 1 n" alu_data_out [30] $end
$var wire 1 o" alu_data_out [29] $end
$var wire 1 p" alu_data_out [28] $end
$var wire 1 q" alu_data_out [27] $end
$var wire 1 r" alu_data_out [26] $end
$var wire 1 s" alu_data_out [25] $end
$var wire 1 t" alu_data_out [24] $end
$var wire 1 u" alu_data_out [23] $end
$var wire 1 v" alu_data_out [22] $end
$var wire 1 w" alu_data_out [21] $end
$var wire 1 x" alu_data_out [20] $end
$var wire 1 y" alu_data_out [19] $end
$var wire 1 z" alu_data_out [18] $end
$var wire 1 {" alu_data_out [17] $end
$var wire 1 |" alu_data_out [16] $end
$var wire 1 }" alu_data_out [15] $end
$var wire 1 ~" alu_data_out [14] $end
$var wire 1 !# alu_data_out [13] $end
$var wire 1 "# alu_data_out [12] $end
$var wire 1 ## alu_data_out [11] $end
$var wire 1 $# alu_data_out [10] $end
$var wire 1 %# alu_data_out [9] $end
$var wire 1 &# alu_data_out [8] $end
$var wire 1 '# alu_data_out [7] $end
$var wire 1 (# alu_data_out [6] $end
$var wire 1 )# alu_data_out [5] $end
$var wire 1 *# alu_data_out [4] $end
$var wire 1 +# alu_data_out [3] $end
$var wire 1 ,# alu_data_out [2] $end
$var wire 1 -# alu_data_out [1] $end
$var wire 1 .# alu_data_out [0] $end
$var wire 1 /# data_mem_dout [31] $end
$var wire 1 0# data_mem_dout [30] $end
$var wire 1 1# data_mem_dout [29] $end
$var wire 1 2# data_mem_dout [28] $end
$var wire 1 3# data_mem_dout [27] $end
$var wire 1 4# data_mem_dout [26] $end
$var wire 1 5# data_mem_dout [25] $end
$var wire 1 6# data_mem_dout [24] $end
$var wire 1 7# data_mem_dout [23] $end
$var wire 1 8# data_mem_dout [22] $end
$var wire 1 9# data_mem_dout [21] $end
$var wire 1 :# data_mem_dout [20] $end
$var wire 1 ;# data_mem_dout [19] $end
$var wire 1 <# data_mem_dout [18] $end
$var wire 1 =# data_mem_dout [17] $end
$var wire 1 ># data_mem_dout [16] $end
$var wire 1 ?# data_mem_dout [15] $end
$var wire 1 @# data_mem_dout [14] $end
$var wire 1 A# data_mem_dout [13] $end
$var wire 1 B# data_mem_dout [12] $end
$var wire 1 C# data_mem_dout [11] $end
$var wire 1 D# data_mem_dout [10] $end
$var wire 1 E# data_mem_dout [9] $end
$var wire 1 F# data_mem_dout [8] $end
$var wire 1 G# data_mem_dout [7] $end
$var wire 1 H# data_mem_dout [6] $end
$var wire 1 I# data_mem_dout [5] $end
$var wire 1 J# data_mem_dout [4] $end
$var wire 1 K# data_mem_dout [3] $end
$var wire 1 L# data_mem_dout [2] $end
$var wire 1 M# data_mem_dout [1] $end
$var wire 1 N# data_mem_dout [0] $end
$var reg 32 O# pc_p [31:0] $end
$var reg 32 P# pc_n [31:0] $end
$var reg 32 Q# reg_HI_p [31:0] $end
$var reg 32 R# reg_HI_n [31:0] $end
$var reg 32 S# reg_LO_p [31:0] $end
$var reg 32 T# reg_LO_n [31:0] $end
$var wire 1 U# pc2instr_mem_addr [31] $end
$var wire 1 V# pc2instr_mem_addr [30] $end
$var wire 1 W# pc2instr_mem_addr [29] $end
$var wire 1 X# pc2instr_mem_addr [28] $end
$var wire 1 Y# pc2instr_mem_addr [27] $end
$var wire 1 Z# pc2instr_mem_addr [26] $end
$var wire 1 [# pc2instr_mem_addr [25] $end
$var wire 1 \# pc2instr_mem_addr [24] $end
$var wire 1 ]# pc2instr_mem_addr [23] $end
$var wire 1 ^# pc2instr_mem_addr [22] $end
$var wire 1 _# pc2instr_mem_addr [21] $end
$var wire 1 `# pc2instr_mem_addr [20] $end
$var wire 1 a# pc2instr_mem_addr [19] $end
$var wire 1 b# pc2instr_mem_addr [18] $end
$var wire 1 c# pc2instr_mem_addr [17] $end
$var wire 1 d# pc2instr_mem_addr [16] $end
$var wire 1 e# pc2instr_mem_addr [15] $end
$var wire 1 f# pc2instr_mem_addr [14] $end
$var wire 1 g# pc2instr_mem_addr [13] $end
$var wire 1 h# pc2instr_mem_addr [12] $end
$var wire 1 i# pc2instr_mem_addr [11] $end
$var wire 1 j# pc2instr_mem_addr [10] $end
$var wire 1 k# pc2instr_mem_addr [9] $end
$var wire 1 l# pc2instr_mem_addr [8] $end
$var wire 1 m# pc2instr_mem_addr [7] $end
$var wire 1 n# pc2instr_mem_addr [6] $end
$var wire 1 o# pc2instr_mem_addr [5] $end
$var wire 1 p# pc2instr_mem_addr [4] $end
$var wire 1 q# pc2instr_mem_addr [3] $end
$var wire 1 r# pc2instr_mem_addr [2] $end
$var wire 1 s# pc2instr_mem_addr [1] $end
$var wire 1 t# pc2instr_mem_addr [0] $end
$scope module instr_mem_inst $end
$var parameter 32 u# INSTR_CAPACITY $end
$var parameter 32 v# ADDRESS_WIDTH $end
$var parameter 32 w# INSTR_WIDTH $end
$var parameter 32 x# ADDRESS_ACCESS $end
$var wire 1 ' HW_RSTn $end
$var wire 1 ( CLK $end
$var wire 1 U# addr [31] $end
$var wire 1 V# addr [30] $end
$var wire 1 W# addr [29] $end
$var wire 1 X# addr [28] $end
$var wire 1 Y# addr [27] $end
$var wire 1 Z# addr [26] $end
$var wire 1 [# addr [25] $end
$var wire 1 \# addr [24] $end
$var wire 1 ]# addr [23] $end
$var wire 1 ^# addr [22] $end
$var wire 1 _# addr [21] $end
$var wire 1 `# addr [20] $end
$var wire 1 a# addr [19] $end
$var wire 1 b# addr [18] $end
$var wire 1 c# addr [17] $end
$var wire 1 d# addr [16] $end
$var wire 1 e# addr [15] $end
$var wire 1 f# addr [14] $end
$var wire 1 g# addr [13] $end
$var wire 1 h# addr [12] $end
$var wire 1 i# addr [11] $end
$var wire 1 j# addr [10] $end
$var wire 1 k# addr [9] $end
$var wire 1 l# addr [8] $end
$var wire 1 m# addr [7] $end
$var wire 1 n# addr [6] $end
$var wire 1 o# addr [5] $end
$var wire 1 p# addr [4] $end
$var wire 1 q# addr [3] $end
$var wire 1 r# addr [2] $end
$var wire 1 s# addr [1] $end
$var wire 1 t# addr [0] $end
$var wire 1 y# WE $end
$var wire 1 ) data_in [31] $end
$var wire 1 * data_in [30] $end
$var wire 1 + data_in [29] $end
$var wire 1 , data_in [28] $end
$var wire 1 - data_in [27] $end
$var wire 1 . data_in [26] $end
$var wire 1 / data_in [25] $end
$var wire 1 0 data_in [24] $end
$var wire 1 1 data_in [23] $end
$var wire 1 2 data_in [22] $end
$var wire 1 3 data_in [21] $end
$var wire 1 4 data_in [20] $end
$var wire 1 5 data_in [19] $end
$var wire 1 6 data_in [18] $end
$var wire 1 7 data_in [17] $end
$var wire 1 8 data_in [16] $end
$var wire 1 9 data_in [15] $end
$var wire 1 : data_in [14] $end
$var wire 1 ; data_in [13] $end
$var wire 1 < data_in [12] $end
$var wire 1 = data_in [11] $end
$var wire 1 > data_in [10] $end
$var wire 1 ? data_in [9] $end
$var wire 1 @ data_in [8] $end
$var wire 1 A data_in [7] $end
$var wire 1 B data_in [6] $end
$var wire 1 C data_in [5] $end
$var wire 1 D data_in [4] $end
$var wire 1 E data_in [3] $end
$var wire 1 F data_in [2] $end
$var wire 1 G data_in [1] $end
$var wire 1 H data_in [0] $end
$var wire 1 z# data_out [31] $end
$var wire 1 {# data_out [30] $end
$var wire 1 |# data_out [29] $end
$var wire 1 }# data_out [28] $end
$var wire 1 ~# data_out [27] $end
$var wire 1 !$ data_out [26] $end
$var wire 1 "$ data_out [25] $end
$var wire 1 #$ data_out [24] $end
$var wire 1 $$ data_out [23] $end
$var wire 1 %$ data_out [22] $end
$var wire 1 &$ data_out [21] $end
$var wire 1 '$ data_out [20] $end
$var wire 1 ($ data_out [19] $end
$var wire 1 )$ data_out [18] $end
$var wire 1 *$ data_out [17] $end
$var wire 1 +$ data_out [16] $end
$var wire 1 ,$ data_out [15] $end
$var wire 1 -$ data_out [14] $end
$var wire 1 .$ data_out [13] $end
$var wire 1 /$ data_out [12] $end
$var wire 1 0$ data_out [11] $end
$var wire 1 1$ data_out [10] $end
$var wire 1 2$ data_out [9] $end
$var wire 1 3$ data_out [8] $end
$var wire 1 4$ data_out [7] $end
$var wire 1 5$ data_out [6] $end
$var wire 1 6$ data_out [5] $end
$var wire 1 7$ data_out [4] $end
$var wire 1 8$ data_out [3] $end
$var wire 1 9$ data_out [2] $end
$var wire 1 :$ data_out [1] $end
$var wire 1 ;$ data_out [0] $end
$var reg 32 <$ temp_out [31:0] $end
$var integer 32 =$ i $end
$var integer 32 >$ j $end
$var integer 32 ?$ k $end
$upscope $end
$scope module mips_mpa_inst $end
$var wire 1 ' HW_RSTn $end
$var wire 1 0! CLK $end
$var wire 1 5! A0 [4] $end
$var wire 1 6! A0 [3] $end
$var wire 1 7! A0 [2] $end
$var wire 1 8! A0 [1] $end
$var wire 1 9! A0 [0] $end
$var wire 1 :! A1 [4] $end
$var wire 1 ;! A1 [3] $end
$var wire 1 <! A1 [2] $end
$var wire 1 =! A1 [1] $end
$var wire 1 >! A1 [0] $end
$var wire 1 :! A2 [4] $end
$var wire 1 ;! A2 [3] $end
$var wire 1 <! A2 [2] $end
$var wire 1 =! A2 [1] $end
$var wire 1 >! A2 [0] $end
$var wire 1 ?! DIN [31] $end
$var wire 1 @! DIN [30] $end
$var wire 1 A! DIN [29] $end
$var wire 1 B! DIN [28] $end
$var wire 1 C! DIN [27] $end
$var wire 1 D! DIN [26] $end
$var wire 1 E! DIN [25] $end
$var wire 1 F! DIN [24] $end
$var wire 1 G! DIN [23] $end
$var wire 1 H! DIN [22] $end
$var wire 1 I! DIN [21] $end
$var wire 1 J! DIN [20] $end
$var wire 1 K! DIN [19] $end
$var wire 1 L! DIN [18] $end
$var wire 1 M! DIN [17] $end
$var wire 1 N! DIN [16] $end
$var wire 1 O! DIN [15] $end
$var wire 1 P! DIN [14] $end
$var wire 1 Q! DIN [13] $end
$var wire 1 R! DIN [12] $end
$var wire 1 S! DIN [11] $end
$var wire 1 T! DIN [10] $end
$var wire 1 U! DIN [9] $end
$var wire 1 V! DIN [8] $end
$var wire 1 W! DIN [7] $end
$var wire 1 X! DIN [6] $end
$var wire 1 Y! DIN [5] $end
$var wire 1 Z! DIN [4] $end
$var wire 1 [! DIN [3] $end
$var wire 1 \! DIN [2] $end
$var wire 1 ]! DIN [1] $end
$var wire 1 ^! DIN [0] $end
$var wire 1 4! WE $end
$var wire 1 b! DOUT0 [31] $end
$var wire 1 c! DOUT0 [30] $end
$var wire 1 d! DOUT0 [29] $end
$var wire 1 e! DOUT0 [28] $end
$var wire 1 f! DOUT0 [27] $end
$var wire 1 g! DOUT0 [26] $end
$var wire 1 h! DOUT0 [25] $end
$var wire 1 i! DOUT0 [24] $end
$var wire 1 j! DOUT0 [23] $end
$var wire 1 k! DOUT0 [22] $end
$var wire 1 l! DOUT0 [21] $end
$var wire 1 m! DOUT0 [20] $end
$var wire 1 n! DOUT0 [19] $end
$var wire 1 o! DOUT0 [18] $end
$var wire 1 p! DOUT0 [17] $end
$var wire 1 q! DOUT0 [16] $end
$var wire 1 r! DOUT0 [15] $end
$var wire 1 s! DOUT0 [14] $end
$var wire 1 t! DOUT0 [13] $end
$var wire 1 u! DOUT0 [12] $end
$var wire 1 v! DOUT0 [11] $end
$var wire 1 w! DOUT0 [10] $end
$var wire 1 x! DOUT0 [9] $end
$var wire 1 y! DOUT0 [8] $end
$var wire 1 z! DOUT0 [7] $end
$var wire 1 {! DOUT0 [6] $end
$var wire 1 |! DOUT0 [5] $end
$var wire 1 }! DOUT0 [4] $end
$var wire 1 ~! DOUT0 [3] $end
$var wire 1 !" DOUT0 [2] $end
$var wire 1 "" DOUT0 [1] $end
$var wire 1 #" DOUT0 [0] $end
$var wire 1 $" DOUT1 [31] $end
$var wire 1 %" DOUT1 [30] $end
$var wire 1 &" DOUT1 [29] $end
$var wire 1 '" DOUT1 [28] $end
$var wire 1 (" DOUT1 [27] $end
$var wire 1 )" DOUT1 [26] $end
$var wire 1 *" DOUT1 [25] $end
$var wire 1 +" DOUT1 [24] $end
$var wire 1 ," DOUT1 [23] $end
$var wire 1 -" DOUT1 [22] $end
$var wire 1 ." DOUT1 [21] $end
$var wire 1 /" DOUT1 [20] $end
$var wire 1 0" DOUT1 [19] $end
$var wire 1 1" DOUT1 [18] $end
$var wire 1 2" DOUT1 [17] $end
$var wire 1 3" DOUT1 [16] $end
$var wire 1 4" DOUT1 [15] $end
$var wire 1 5" DOUT1 [14] $end
$var wire 1 6" DOUT1 [13] $end
$var wire 1 7" DOUT1 [12] $end
$var wire 1 8" DOUT1 [11] $end
$var wire 1 9" DOUT1 [10] $end
$var wire 1 :" DOUT1 [9] $end
$var wire 1 ;" DOUT1 [8] $end
$var wire 1 <" DOUT1 [7] $end
$var wire 1 =" DOUT1 [6] $end
$var wire 1 >" DOUT1 [5] $end
$var wire 1 ?" DOUT1 [4] $end
$var wire 1 @" DOUT1 [3] $end
$var wire 1 A" DOUT1 [2] $end
$var wire 1 B" DOUT1 [1] $end
$var wire 1 C" DOUT1 [0] $end
$var integer 32 @$ i $end
$upscope $end
$scope module mpa_alu_inst $end
$var parameter 32 A$ DATA_WIDTH $end
$var parameter 32 B$ FUNCTION_SEL_WIDTH $end
$var wire 1 _! func_sel [2] $end
$var wire 1 `! func_sel [1] $end
$var wire 1 a! func_sel [0] $end
$var wire 1 b! data0 [31] $end
$var wire 1 c! data0 [30] $end
$var wire 1 d! data0 [29] $end
$var wire 1 e! data0 [28] $end
$var wire 1 f! data0 [27] $end
$var wire 1 g! data0 [26] $end
$var wire 1 h! data0 [25] $end
$var wire 1 i! data0 [24] $end
$var wire 1 j! data0 [23] $end
$var wire 1 k! data0 [22] $end
$var wire 1 l! data0 [21] $end
$var wire 1 m! data0 [20] $end
$var wire 1 n! data0 [19] $end
$var wire 1 o! data0 [18] $end
$var wire 1 p! data0 [17] $end
$var wire 1 q! data0 [16] $end
$var wire 1 r! data0 [15] $end
$var wire 1 s! data0 [14] $end
$var wire 1 t! data0 [13] $end
$var wire 1 u! data0 [12] $end
$var wire 1 v! data0 [11] $end
$var wire 1 w! data0 [10] $end
$var wire 1 x! data0 [9] $end
$var wire 1 y! data0 [8] $end
$var wire 1 z! data0 [7] $end
$var wire 1 {! data0 [6] $end
$var wire 1 |! data0 [5] $end
$var wire 1 }! data0 [4] $end
$var wire 1 ~! data0 [3] $end
$var wire 1 !" data0 [2] $end
$var wire 1 "" data0 [1] $end
$var wire 1 #" data0 [0] $end
$var wire 1 D" data1 [31] $end
$var wire 1 E" data1 [30] $end
$var wire 1 F" data1 [29] $end
$var wire 1 G" data1 [28] $end
$var wire 1 H" data1 [27] $end
$var wire 1 I" data1 [26] $end
$var wire 1 J" data1 [25] $end
$var wire 1 K" data1 [24] $end
$var wire 1 L" data1 [23] $end
$var wire 1 M" data1 [22] $end
$var wire 1 N" data1 [21] $end
$var wire 1 O" data1 [20] $end
$var wire 1 P" data1 [19] $end
$var wire 1 Q" data1 [18] $end
$var wire 1 R" data1 [17] $end
$var wire 1 S" data1 [16] $end
$var wire 1 T" data1 [15] $end
$var wire 1 U" data1 [14] $end
$var wire 1 V" data1 [13] $end
$var wire 1 W" data1 [12] $end
$var wire 1 X" data1 [11] $end
$var wire 1 Y" data1 [10] $end
$var wire 1 Z" data1 [9] $end
$var wire 1 [" data1 [8] $end
$var wire 1 \" data1 [7] $end
$var wire 1 ]" data1 [6] $end
$var wire 1 ^" data1 [5] $end
$var wire 1 _" data1 [4] $end
$var wire 1 `" data1 [3] $end
$var wire 1 a" data1 [2] $end
$var wire 1 b" data1 [1] $end
$var wire 1 c" data1 [0] $end
$var wire 1 m" data_out [31] $end
$var wire 1 n" data_out [30] $end
$var wire 1 o" data_out [29] $end
$var wire 1 p" data_out [28] $end
$var wire 1 q" data_out [27] $end
$var wire 1 r" data_out [26] $end
$var wire 1 s" data_out [25] $end
$var wire 1 t" data_out [24] $end
$var wire 1 u" data_out [23] $end
$var wire 1 v" data_out [22] $end
$var wire 1 w" data_out [21] $end
$var wire 1 x" data_out [20] $end
$var wire 1 y" data_out [19] $end
$var wire 1 z" data_out [18] $end
$var wire 1 {" data_out [17] $end
$var wire 1 |" data_out [16] $end
$var wire 1 }" data_out [15] $end
$var wire 1 ~" data_out [14] $end
$var wire 1 !# data_out [13] $end
$var wire 1 "# data_out [12] $end
$var wire 1 ## data_out [11] $end
$var wire 1 $# data_out [10] $end
$var wire 1 %# data_out [9] $end
$var wire 1 &# data_out [8] $end
$var wire 1 '# data_out [7] $end
$var wire 1 (# data_out [6] $end
$var wire 1 )# data_out [5] $end
$var wire 1 *# data_out [4] $end
$var wire 1 +# data_out [3] $end
$var wire 1 ,# data_out [2] $end
$var wire 1 -# data_out [1] $end
$var wire 1 .# data_out [0] $end
$var reg 32 C$ temp_out [31:0] $end
$upscope $end
$scope module mpa_data_mem_inst $end
$var parameter 32 D$ DATA_CAPACITY $end
$var parameter 32 E$ DATA_WIDTH $end
$var parameter 32 F$ ADDRESS_WIDTH $end
$var parameter 32 G$ GRANULARITY $end
$var wire 1 ' HW_RSTn $end
$var wire 1 ( CLK $end
$var wire 1 m" addr [31] $end
$var wire 1 n" addr [30] $end
$var wire 1 o" addr [29] $end
$var wire 1 p" addr [28] $end
$var wire 1 q" addr [27] $end
$var wire 1 r" addr [26] $end
$var wire 1 s" addr [25] $end
$var wire 1 t" addr [24] $end
$var wire 1 u" addr [23] $end
$var wire 1 v" addr [22] $end
$var wire 1 w" addr [21] $end
$var wire 1 x" addr [20] $end
$var wire 1 y" addr [19] $end
$var wire 1 z" addr [18] $end
$var wire 1 {" addr [17] $end
$var wire 1 |" addr [16] $end
$var wire 1 }" addr [15] $end
$var wire 1 ~" addr [14] $end
$var wire 1 !# addr [13] $end
$var wire 1 "# addr [12] $end
$var wire 1 ## addr [11] $end
$var wire 1 $# addr [10] $end
$var wire 1 %# addr [9] $end
$var wire 1 &# addr [8] $end
$var wire 1 '# addr [7] $end
$var wire 1 (# addr [6] $end
$var wire 1 )# addr [5] $end
$var wire 1 *# addr [4] $end
$var wire 1 +# addr [3] $end
$var wire 1 ,# addr [2] $end
$var wire 1 -# addr [1] $end
$var wire 1 .# addr [0] $end
$var wire 1 m" data_in [31] $end
$var wire 1 n" data_in [30] $end
$var wire 1 o" data_in [29] $end
$var wire 1 p" data_in [28] $end
$var wire 1 q" data_in [27] $end
$var wire 1 r" data_in [26] $end
$var wire 1 s" data_in [25] $end
$var wire 1 t" data_in [24] $end
$var wire 1 u" data_in [23] $end
$var wire 1 v" data_in [22] $end
$var wire 1 w" data_in [21] $end
$var wire 1 x" data_in [20] $end
$var wire 1 y" data_in [19] $end
$var wire 1 z" data_in [18] $end
$var wire 1 {" data_in [17] $end
$var wire 1 |" data_in [16] $end
$var wire 1 }" data_in [15] $end
$var wire 1 ~" data_in [14] $end
$var wire 1 !# data_in [13] $end
$var wire 1 "# data_in [12] $end
$var wire 1 ## data_in [11] $end
$var wire 1 $# data_in [10] $end
$var wire 1 %# data_in [9] $end
$var wire 1 &# data_in [8] $end
$var wire 1 '# data_in [7] $end
$var wire 1 (# data_in [6] $end
$var wire 1 )# data_in [5] $end
$var wire 1 *# data_in [4] $end
$var wire 1 +# data_in [3] $end
$var wire 1 ,# data_in [2] $end
$var wire 1 -# data_in [1] $end
$var wire 1 .# data_in [0] $end
$var wire 1 H$ WE $end
$var wire 1 I$ RE $end
$var wire 1 /# data_out [31] $end
$var wire 1 0# data_out [30] $end
$var wire 1 1# data_out [29] $end
$var wire 1 2# data_out [28] $end
$var wire 1 3# data_out [27] $end
$var wire 1 4# data_out [26] $end
$var wire 1 5# data_out [25] $end
$var wire 1 6# data_out [24] $end
$var wire 1 7# data_out [23] $end
$var wire 1 8# data_out [22] $end
$var wire 1 9# data_out [21] $end
$var wire 1 :# data_out [20] $end
$var wire 1 ;# data_out [19] $end
$var wire 1 <# data_out [18] $end
$var wire 1 =# data_out [17] $end
$var wire 1 ># data_out [16] $end
$var wire 1 ?# data_out [15] $end
$var wire 1 @# data_out [14] $end
$var wire 1 A# data_out [13] $end
$var wire 1 B# data_out [12] $end
$var wire 1 C# data_out [11] $end
$var wire 1 D# data_out [10] $end
$var wire 1 E# data_out [9] $end
$var wire 1 F# data_out [8] $end
$var wire 1 G# data_out [7] $end
$var wire 1 H# data_out [6] $end
$var wire 1 I# data_out [5] $end
$var wire 1 J# data_out [4] $end
$var wire 1 K# data_out [3] $end
$var wire 1 L# data_out [2] $end
$var wire 1 M# data_out [1] $end
$var wire 1 N# data_out [0] $end
$var integer 32 J$ i $end
$var integer 32 K$ j $end
$scope begin genblk1[3] $end
$var parameter 32 L$ k $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 32 M$ k $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 32 N$ k $end
$upscope $end
$scope begin genblk1[0] $end
$var parameter 32 O$ k $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x!
x"
xd"
bx e"
bx f"
bx g"
bx h"
xi"
xj"
xk"
bx l"
bx O#
bx P#
bx Q#
bx R#
bx S#
bx T#
bx <$
bx C$
b100000 #
b100000 $
b100000 %
b0 &
b1000000 u#
b100000 v#
b100000 w#
b1000 x#
b100000 A$
b11 B$
b10000000 D$
b100000 E$
b100000 F$
b1000 G$
b0 O$
b1 N$
b10 M$
b11 L$
b0 =$
b0 >$
b0 ?$
b0 @$
b0 J$
b0 K$
x0!
x1!
x2!
x3!
x4!
x9!
x8!
x7!
x6!
x5!
z>!
z=!
z<!
z;!
z:!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
xa!
x`!
x_!
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
x(
z'
zH
zG
zF
zE
zD
zC
zB
zA
z@
z?
z>
z=
z<
z;
z:
z9
z8
z7
z6
z5
z4
z3
z2
z1
z0
z/
z.
z-
z,
z+
z*
z)
zh
zg
zf
ze
zd
zc
zb
za
z`
z_
z^
z]
z\
z[
zZ
zY
zX
zW
zV
zU
zT
zS
zR
zQ
zP
zO
zN
zM
zL
zK
zJ
zI
z*!
z)!
z(!
z'!
z&!
z%!
z$!
z#!
z"!
z!!
z~
z}
z|
z{
zz
zy
zx
zw
zv
zu
zt
zs
zr
zq
zp
zo
zn
zm
zl
zk
zj
zi
z,!
z+!
z-!
z.!
z/!
xI$
xH$
zy#
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
$end
