// 0.
000000_00000_00000_0000000000000000
// 1. LBU MD[0] -> MR[1]
100100_00000_00001_0000000000000000
// 2. ANDI MR[1] & 16'b1111111111111100 and store in MR[2]
001100_00001_00010_0000000001111100
// 3. JR MR[2] -> PC ( It's possible that in randomization that the PC might go back to one of the above instructions and the processor will be stuck in a loop )
000000_00010_0000000000_00000_001000
// 4. ANDI MR[1] & 16'b1000000000000000 and store in MR[3]
001100_00001_00011_1000000000000000
// 5. ANDI MR[1] & 16'b0100000000000000 and store in MR[3]
001100_00001_00011_0100000000000000
// 6. ANDI MR[1] & 16'b0010000000000000 and store in MR[3]
001100_00001_00011_0010000000000000
// 7. ANDI MR[1] & 16'b0001000000000000 and store in MR[3]
001100_00001_00011_0001000000000000
// 8. ANDI MR[1] & 16'b0000100000000000 and store in MR[3]
001100_00001_00011_0000100000000000
// 9. ANDI MR[1] & 16'b0000010000000000 and store in MR[3]
001100_00001_00011_0000010000000000
// 10. ANDI MR[1] & 16'b0000001000000000 and store in MR[3]
001100_00001_00011_0000001000000000
// 11. ANDI MR[1] & 16'b0000000100000000 and store in MR[3]
001100_00001_00011_0000000100000000
// 12. ANDI MR[1] & 16'b0000000010000000 and store in MR[3]
001100_00001_00011_0000000010000000
// 13. ANDI MR[1] & 16'b0000000001000000 and store in MR[3]
001100_00001_00011_0000000001000000
// 14. ANDI MR[1] & 16'b0000000000100000 and store in MR[3]
001100_00001_00011_0000000000100000
// 15. ANDI MR[1] & 16'b0000000000010000 and store in MR[3]
001100_00001_00011_0000000000010000
// 16. ANDI MR[1] & 16'b0000000000001000 and store in MR[3]
001100_00001_00011_0000000000001000
// 17. ANDI MR[1] & 16'b0000000000000100 and store in MR[3]
001100_00001_00011_0000000000000100
// 18. ANDI MR[1] & 16'b0000000000000010 and store in MR[3]
001100_00001_00011_0000000000000010
// 19. ANDI MR[1] & 16'b0000000000000001 and store in MR[3]
001100_00001_00011_0000000000000001
// 20. ANDI MR[1] & 16'b1111111111111110 and store in MR[3]
001100_00001_00011_1111111111111110
// 21. ANDI MR[1] & 16'b1111111111111101 and store in MR[3]
001100_00001_00011_1111111111111101
// 22. ANDI MR[1] & 16'b1111111111111011 and store in MR[3]
001100_00001_00011_1111111111111011
// 23. ANDI MR[1] & 16'b1111111111110111 and store in MR[3]
001100_00001_00011_1111111111110111
// 24. ANDI MR[1] & 16'b1111111111101111 and store in MR[3]
001100_00001_00011_1111111111101111
// 25. ANDI MR[1] & 16'b1111111111011111 and store in MR[3]
001100_00001_00011_1111111111011111
// 26. ANDI MR[1] & 16'b1111111110111111 and store in MR[3]
001100_00001_00011_1111111110111111
// 27. ANDI MR[1] & 16'b1111111101111111 and store in MR[3]
001100_00001_00011_1111111101111111
// 28. ANDI MR[1] & 16'b1111111011111111 and store in MR[3]
001100_00001_00011_1111111011111111
// 29. ANDI MR[1] & 16'b1111110111111111 and store in MR[3]
001100_00001_00011_1111110111111111
// 30. ANDI MR[1] & 16'b1111101111111111 and store in MR[3]
001100_00001_00011_1111101111111111
// 31. ANDI MR[1] & 16'b1111011111111111 and store in MR[3]
001100_00001_00011_1111011111111111
